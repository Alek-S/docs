# How to deal with Asynchronous code

Javascript is an asynchronous language, in contrast to many synchronous languages like PHP, Ruby, Python, Perl, C, etc.  There are a number of important things to be aware of if you don't want your code to execute in extremely unexpected ways.

- Examples of when asynchrnonicity becomes important
///This is probably important soon

Most functions have a syncronous version by prepending `Sync`. You normally want to stay away from these. Conventional node.js code uses the asyncronous code. //example of sync vs async and explanation why blocking isnt good

A common mistake in asyncronous code with javascript is to write code that does something like this:

     for (var i = 0; i < 5; i++) {
       setTimeout(function () {
         console.log(i);
       }, i);
     }

The unexpected output is then:

    5
    5
    5
    5
    5

The reason this happens is because each timeout is created and then `i` is incremented. Then when the callback is called, it looks for the value of `i` and it is 5. The solution is to create a closure so that the current value of `i` is stored. For example:

     for (var i = 0; i < 5; i++) {
       (function(i) {
         setTimeout(function () {
           console.log(i);
         }, i);
       })(i);

This gives the proper output:

    0
    1
    2
    3
    4

- Callbacks - definition, and good-practice examples
///We already have the article `what are callbacks?`
